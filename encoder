// ENCODER.CPP

#include "encoder.h"

//#include <libexplain/open.h>

Encoder::Encoder(spiName spiName, uint8_t spiBitsPerWord, uint8_t spiMode, uint32_t spiSpeed){
    char debugbf[128];

    this->spiChipNumber     = (static_cast<int>(spiName) % 2);
    this->spiBusNumber      = ( (static_cast<int>(spiName) - this->spiChipNumber)/2 );

    this->dtSpiFilename     = "SPI" + tostr(this->spiBusNumber);
    this->spiFD             = -1;
    this->isOpenFlag        = false;
    this->isCurrentEqDefault= false;

    //for (int i = 0; i < 3; i++){
    //    this->offsets[i] = 0.0F;
    //}
    constructorProperties.spiBitsPerWord    = spiBitsPerWord;
    constructorProperties.spiMode           = spiMode;
    constructorProperties.spiSpeed          = spiSpeed;

    this->spiPortPath = "/dev/spidev"+tostr(this->spiBusNumber)+"."+tostr(this->spiChipNumber);
}

//! @name ~SPI
//!
//! @brief Destructor of SPI class.  This function closes TTY file and deletes
//! errorSPI struct pointer.
//!
//!
//! @retval
Encoder::~Encoder(){

   this->close();
}

//! @name float angle = 0.0;
    //float angleOld = 0.0;
    //close
//!
//! @brief Closes TTY file of spi.  This function closes spi's TTY file and changes
//! isOpenFlag's value.
//!
//!
//! @retval bool
bool Encoder::close(){

  if( ::close(this->spiFD) < 0 )
  {

      return false;
  }
  else
  {
      this->isOpenFlag = false;
      return true;
  }
}

//! @name isClose
//!
//! @brief Checks spi's tty file's close state.
//!
//!
//! @retval bool
bool Encoder::isClose(){

   return !(this->isOpenFlag);
}

//! @name isOpen
//!
//! @brief Checks spi's tty file's open state.
//!
//!
//! @retval bool
bool Encoder::isOpen(){

   return this->isOpenFlag;
}


//! @name setBitsPerWord
//!
//! @brief Changes word size of spi.  This function changes bits per word size of
//! spi on fly.
//!
//! @param  newBitSize
//! @retval bool
bool Encoder::setBitsPerWord(uint8_t newBitSize){

   if( ::ioctl(this->spiFD, SPI_IOC_WR_BITS_PER_WORD, &newBitSize) == -1 )
      {
          return false;
      }
      else
      {
          this->currentProperties.spiBitsPerWord = newBitSize;
          return true;
      }
}

//! @name setMaximumSpeed
//!
//! @brief Changes maximum speed of spi.  This function changes maximum speed of
//! spi on fly.
//!
//! @param  newSpeed
//! @retval bool
bool Encoder::setMaximumSpeed(uint32_t newSpeed){

   if( ::ioctl(this->spiFD, SPI_IOC_WR_MAX_SPEED_HZ, &newSpeed) == -1 )
      {
          return false;
      }
      else
      {
          this->currentProperties.spiSpeed = newSpeed;
          return true;
      }
}

//! @name setMode
//!
//! @brief Changes mode of spi.  This function changes mode of spi on fly. Users
//! can send "or"ed Lib::spiMode enums as parameter to this function.
//!
//! @param  newMode
//! @retval bool
bool Encoder::setMode(uint8_t newMode){

   if( ::ioctl(this->spiFD, SPI_IOC_WR_MODE, &newMode) == -1 )
      {
          return false;
      }
      else
      {
          this->currentProperties.spiMode = newMode;
          return true;
      }
}

//! @name setProperties
//!
//! @brief Changes properties of spi.  This function changes properties of spi.
//! These properties are composed of word size, speed and mode.
//!
//! @param  newProperties
//! @retval bool
bool Encoder::setProperties(SpiProperties& newProperties){

   return ( this->setBitsPerWord( newProperties.spiBitsPerWord ) and
               this->setMaximumSpeed( newProperties.spiSpeed ) and
               this->setMode( newProperties.spiMode )
             );
}


//! @name open
//!
//! @brief Opens TTY file of spi.  This function opens spi's TTY file with selected
//! open mode, gets default properties of SPI and saves this properties to GonioMeter::
//! defaultProperties struct. Then sets properties which are specified at class
//! initialization stage. Users can send "or"ed Lib::openMode enums as parameter to
//! this function.
//! @warning After initialization of SPI class, this function must call. Otherwise
//! users could not use any of data transfering functions.
//!
//! @param  openMode
//! @retval bool
bool Encoder::open(uint openMode){

   uint flags = 0;
      printf(" function called ");
      if( (openMode & ReadOnly)   == ReadOnly     ){  flags |= O_RDONLY;  }
      if( (openMode & WriteOnly)  == WriteOnly    ){  flags |= O_WRONLY;  }
      if( (openMode & ReadWrite)  == ReadWrite    ){  flags |= O_RDWR;    }
      if( (openMode & Append)     == Append       ){  flags |= O_APPEND;  }
      if( (openMode & Truncate)   == Truncate     ){  flags |= O_TRUNC;   }
      if( (openMode & NonBlock)   == NonBlock     ){  flags |= O_NONBLOCK;}


      this->spiFD = ::open(this->spiPortPath.c_str(), flags);


      if( this->spiFD < 0 )
      {
          this->isOpenFlag            = false;
          printf(" flag changed to 0 ");
          return false;
      }

      this->isOpenFlag            = true;
      printf(" flag changed to 1 ");

      if (!(this->setProperties(this->constructorProperties))){
          return false;
      }
      return true;
}




//! @name transfer
//!
//! @brief Transfers datas to/from slave.  This function creates temporary read
//! buffer with specified size and then generates <b><i>SPI IOCTL TRANSFER PACKAGE
//! </i></b> with write buffer pointer, temporary read buffer pointer, buffer size,
//! delay time, spi word's size and spi speed parameters. After doing ioctl kernel
//! request if request is finished successfully, datas which are held in temporary
//! read buffer are copied to @a.
//!
//! @param  writeBuffer
//! @param  readBuffer
//! @param  bufferSize
//! @param  wait_us
//! @retval bool
bool Encoder::transfer(uint8_t* writeBuffer, uint8_t* readBuffer, size_t bufferSize, uint16_t wait_us){
    return true;
}


int Encoder::transferUART4(char *TXbuffer, char *RXbuffer,int dimBufferTX,int dimBufferRX)
{
    int speed  = 115200; //this is the max speed
    int i;
    int fd;
    int wlen;
    int rdlen = 0;
    struct termios tty;

    fd = ::open("/dev/ttyO4", O_RDWR | O_NOCTTY | O_NDELAY | O_NONBLOCK);
    if (fd < 0) {
        printf("Error opening UART\n");
        return -1;
    }
    if (::tcgetattr(fd, &tty) < 0)
    {
        printf("Error from tcgetattr: \n");
        return -1;
    }

    ::cfsetospeed(&tty, (speed_t)speed);
    ::cfsetispeed(&tty, (speed_t)speed);

    tty.c_cflag |= (CLOCAL | CREAD);    /* ignore modem controls */
    tty.c_cflag &= ~CSIZE;
    tty.c_cflag |= CS8;         /* 8-bit characters */
    tty.c_cflag &= ~PARENB;     /* no parity bit */
    tty.c_cflag &= ~CSTOPB;     /* only need 1 stop bit */
    tty.c_cflag &= ~CRTSCTS;    /* no hardware flowcontrol */

    /* setup for non-canonical mode */
    tty.c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR | IGNCR | ICRNL | IXON);
    tty.c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
    tty.c_oflag &= ~OPOST;

    /* fetch bytes as they become available */
    tty.c_cc[VMIN] = 1;
    tty.c_cc[VTIME] = 1;

    if (::tcsetattr(fd, TCSANOW, &tty) != 0) {
        printf("Error from tcsetattr \n");
        return -1;
    }


    wlen = ::write(fd, TXbuffer, dimBufferTX);
    if (wlen != dimBufferTX) {
        printf("Error from write: %d \n", wlen);
        return -1;
    }
    return fd;
    //::close(fd);
//     ::tcdrain(fd);    /* delay for output */
//
//
//     rdlen = ::read(fd, RXbuffer, dimBufferRX);
//
//     if (rdlen != (dimBufferRX))    {
//         printf("\n\r Error on receiving data ( only %d / %d bytes Received ) \n\r",rdlen,dimBufferRX);
//         ::close(fd);[ 715 715 715  715 715 715 300 300 300 300 ]
//         return -1;
//     }else{
//         ::close(fd);
//         return rdlen;
    //}

} // end main






float Encoder::transferNEW1()
{
    int fdNew;
    int indexBuffer;
    const char *deviceNew = "/dev/spidev1.0";
    uint8_t modeNew;
    uint8_t bitsNew = 8;
    uint32_t speedNew = 125000;
    uint16_t delayNew;

    uint32_t encoder_pos = 0;
    uint32_t temp_encoder_pos = 0;

    int ret;
    uint8_t tx[] = {0x00, 0x01, 0x02, 0x03, 0x04};
    uint8_t rx[5] = {0, };

    struct spi_ioc_transfer tr;

    // Simulink
    uint32_t current_encoder_pos = 0;
    uint8_t crc;
    uint8_t crc_check;
    uint8_t detail_stat;
    uint8_t gen_stat;
    uint8_t res = 16; //angle resolution
    //float angle = 0.0;
    float angle;
    //float angleOld;
    //float angleOld = 0.0;
    uint32_t data_bits;
    uint32_t temp;
    uint32_t t;
    uint8_t tableCRC [256] = {
        0x00, 0x97, 0xB9, 0x2E, 0xE5, 0x72, 0x5C, 0xCB, 0x5D, 0xCA, 0xE4, 0x73, 0xB8, 0x2F, 0x01, 0x96,
        0xBA, 0x2D, 0x03, 0x94, 0x5F, 0xC8, 0xE6, 0x71, 0xE7, 0x70, 0x5E, 0xC9, 0x02, 0x95, 0xBB, 0x2C,
        0xE3, 0x74, 0x5A, 0xCD, 0x06, 0x91, 0xBF, 0x28, 0xBE, 0x29, 0x07, 0x90, 0x5B, 0xCC, 0xE2, 0x75,
        0x59, 0xCE, 0xE0, 0x77, 0xBC, 0x2B, 0x05, 0x92, 0x04, 0x93, 0xBD, 0x2A, 0xE1, 0x76, 0x58, 0xCF,
        0x51, 0xC6, 0xE8, 0x7F, 0xB4, 0x23, 0x0D, 0x9A, 0x0C, 0x9B, 0xB5, 0x22, 0xE9, 0x7E, 0x50, 0xC7,
        0xEB, 0x7C, 0x52, 0xC5, 0x0E, 0x99, 0xB7, 0x20, 0xB6, 0x21, 0x0F, 0x98, 0x53, 0xC4, 0xEA, 0x7D,
        0xB2, 0x25, 0x0B, 0x9C, 0x57, 0xC0, 0xEE, 0x79, 0xEF, 0x78, 0x56, 0xC1, 0x0A, 0x9D, 0xB3, 0x24,
        0x08, 0x9F, 0xB1, 0x26, 0xED, 0x7A, 0x54, 0xC3, 0x55, 0xC2, 0xEC, 0x7B, 0xB0, 0x27, 0x09, 0x9E,
        0xA2, 0x35, 0x1B, 0x8C, 0x47, 0xD0, 0xFE, 0x69, 0xFF, 0x68, 0x46, 0xD1, 0x1A, 0x8D, 0xA3, 0x34,
        0x18, 0x8F, 0xA1, 0x36, 0xFD, 0x6A, 0x44, 0xD3, 0x45, 0xD2, 0xFC, 0x6B, 0xA0, 0x37, 0x19, 0x8E,
        0x41, 0xD6, 0xF8, 0x6F, 0xA4, 0x33, 0x1D, 0x8A, 0x1C, 0x8B, 0xA5, 0x32, 0xF9, 0x6E, 0x40, 0xD7,
        0xFB, 0x6C, 0x42, 0xD5, 0x1E, 0x89, 0xA7, 0x30, 0xA6, 0x31, 0x1F, 0x88, 0x43, 0xD4, 0xFA, 0x6D,
        0xF3, 0x64, 0x4A, 0xDD, 0x16, 0x81, 0xAF, 0x38, 0xAE, 0x39, 0x17, 0x80, 0x4B, 0xDC, 0xF2, 0x65,
        0x49, 0xDE, 0xF0, 0x67, 0xAC, 0x3B, 0x15, 0x82, 0x14, 0x83, 0xAD, 0x3A, 0xF1, 0x66, 0x48, 0xDF,
        0x10, 0x87, 0xA9, 0x3E, 0xF5, 0x62, 0x4C, 0xDB, 0x4D, 0xDA, 0xF4, 0x63, 0xA8, 0x3F, 0x11, 0x86,
        0xAA, 0x3D, 0x13, 0x84, 0x4F, 0xD8, 0xF6, 0x61, 0xF7, 0x60, 0x4E, 0xD9, 0x12, 0x85, 0xAB, 0x3C};

    //  Configuration  SPI
//     if (!this->isOpenFlag)
//     {
//     printf(" opening device ");
//     printf(" open flag = %d ", this->isOpenFlag);
    fdNew = ::open(deviceNew, O_RDWR);
//     printf(" open flag = %d ", this->isOpenFlag);
    if (fdNew < 0)
    {
        printf("can't open encoder device123");
        //printf( "    %s0    ", ::explain_open(deviceNew, O_RDWR));
        return -1;
    }
//     }
//     else
//     {
//         printf("device already open");
//     }






/*
    ret = ioctl(fdNew, SPI_IOC_WR_MODE, &modeNew);
    if (ret == -1)
    {
        printf("can't set spi mode");
        return -1;
    }

    ret = ioctl(fdNew, SPI_IOC_RD_MODE, &modeNew);
    if (ret == -1)
    {
        printf("can't get spi mode");
        return -1;
    }

    ret = ioctl(fdNew, SPI_IOC_WR_BITS_PER_WORD, &bitsNew);
    if (ret == -1)
    {
        printf("can't set bits per word");
        return -1;
    }

    ret = ioctl(fdNew, SPI_IOC_RD_BITS_PER_WORD, &bitsNew);
    if (ret == -1)
    {
       printf("can't get bits per word");
        return -1;
    }

    ret = ioctl(fdNew, SPI_IOC_WR_MAX_SPEED_HZ, &speedNew);
    if (ret == -1)
    {
        printf("can't set max speed hz");
        return -1;
    }

    ret = ioctl(fdNew, SPI_IOC_RD_MAX_SPEED_HZ, &speedNew);
    if (ret == -1)
    {
        printf("can't get max speed hz");
        return -1;%.2X \n\r
    }

*/

   //  Send

    tr.tx_buf = (unsigned long)tx;
    tr.rx_buf = (unsigned long)rx;
    tr.len = 5;
    tr.delay_usecs = delayNew;
    tr.speed_hz = speedNew;
    tr.bits_per_word = bitsNew;

    ret = ioctl(fdNew, SPI_IOC_MESSAGE(1), &tr);
    if (ret < 1)
    {
        printf("can't send spi message");
        return -1;
    }

    //printf("\n\r New Buffer Received : ");


    //for (indexBuffer = 0; indexBuffer < 5; indexBuffer++)
    //{
    //    printf(" %.2X ", rx[indexBuffer]);
    //}

     // Simulink code implementation
    // rx is considered MSB ??????
    encoder_pos = (rx[0] << 8) + rx[1]; //16 bits resolution

    crc_check = rx[4];
    detail_stat = ((rx[3] >> 2) + ((rx[2] << 6) & 0x000000FF ));
    gen_stat = (rx[2] >> 2) & 0x00000003;
    data_bits = (rx[0] << 24) + (rx[1] << 16) + (rx[2] << 8) + rx[3];
    if(gen_stat!=0x00000000)
    {
    printf("\n\r gen_stat = %.2X\n\r",gen_stat);
    printf("\n\r det_stat = %.2X\n\r",detail_stat);
    }

    t = (data_bits >> 24) & 0x000000FF;
    crc = ((data_bits >> 16) & 0x000000FF);
    t = crc ^ tableCRC[t];
    crc = ((data_bits >> 8) & 0x000000FF);
    t = crc ^ tableCRC[t];
    crc = (data_bits & 0x000000FF);
    t = crc ^ tableCRC[t];
    crc = tableCRC[t];
    //printf("\n\r rx0 %d\n\r",rx[0]);
    //printf("\n\r rx1 %d\n\r",rx[1]);
    //printf("\n\r encoder pos = %d\n\r",encoder_pos);
    //printf("\n\r angletemp = %f\n\r",((float(encoder_pos / float(1 << 16))) * 360));

    if (crc_check == crc)
    {
        // entra





        //printf("transmission was correct and CRC matches");
        angle = ((encoder_pos / float(1 << 16)) * 360);
        /*
        printf("\n angle vale = %g", angle);
        printf("\n angleOld vale = %g", angleOld);
        if(angleOld!=0.0) //it's not the first cycle
        {
            printf("\n entrato ");
            //control
            if((((angle-angleOld)>5 || (angle-angleOld)<-5)) && ((angle-angleOld)<355 && (angle-angleOld)>-355)){
                printf("\n ENTRATOOOOOOOOOOOOOOOO222 ");
                printf("\n angle sbagliato vale = %g", angle);
                angle=angleOld;
                printf("\n angle giusto vale = %g", angle);

            }
        }
        */
//         if(((angleOld - angle) > 30 && (angleOld - angle) < 330) || ((angleOld-angle) > -330 && (angleOld - angle) < -30))
//         {
//             angle = angleOld;
//         }
        //printf("\n\r angle = %f\n\r",angle);
    } // if not the angle is not changed
    ::close(fdNew);

    return angle;

}

/*void GonioMeter::readADC(float angles[3])
{
   angles[2] = 180;
   angles[1] = 2.5F;
   angles[0] = -2.5F;
}
*/
uint32_t Encoder::parseData(uint8_t *list)
{
   return 1;
}


// ENCODER.H


#if !defined(_ENCODER_HEADER_)
#define _ENCODER_HEADER_

#include <cstring>
#include <string>
#include <fstream>
#include <stdint.h>
#include <unistd.h>
#include <time.h>


#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <termios.h>

#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/spi/spidev.h>

#include "Errors.h"
#include "Definitions.h"

class Encoder
{

public:


   int cnt_send_uart4 = 200;
   float prv_angle;
   double uart_fd = 100;

   struct SpiProperties
   {

   public:
      //! !< @brief is used to hold the bits per word size of SPI
      uint8_t spiBitsPerWord;

      //! !< @brief is used to hold the mode of SPI
      uint8_t spiMode;

      //! !< @brief is used to hold the speed of SPI
      uint32_t spiSpeed;



      //! @name SpiProperties
      //!
      //! @brief Default constructor of SpiProperties struct.  This function sets default
      //! value to variables.
      //!
      //!
      //! @retval
      SpiProperties(){

         spiBitsPerWord  = 0;
         spiMode         = 0;
         spiSpeed        = 0;
      }

      //! @name SpiProperties
      //!
      //! @brief Overloaded constructor of SpiProperties struct.  This function sets
      //! entered parameters to variables.
      //!
      //! @param  bits
      //! @param  mode
      //! @param  speed
      //! @retval
      SpiProperties(uint8_t bits, uint8_t mode, uint32_t speed){

         spiBitsPerWord  = bits;
         spiMode         = mode;
         spiSpeed        = speed;
      }

      //! @name SpiProperties
      //!
      //! @brief Overloaded constructor of SpiProperties struct.  This function gets
      //! pointer of SpiProperties struct and sets this pointed struct's variables to own
      //! variables.
      //!
      //! @param  self
      //! @retval
      SpiProperties(SpiProperties* self){

         spiBitsPerWord  = self->spiBitsPerWord;
         spiMode         = self->spiMode;
         spiSpeed        = self->spiSpeed;
      }

      //! @name operator=
      //!
      //! @brief Overloaded assign operator of SpiProperties struct.  This function
      //! assigns input struct's variables to own variables.
      //!
      //! @param  equal
      //! @retval SpiProperties&
      SpiProperties& operator=(SpiProperties equal){

         spiBitsPerWord  = equal.spiBitsPerWord;
         spiMode         = equal.spiMode;
         spiSpeed        = equal.spiSpeed;
         return *this;
      }

   };

   //! @name GonioMeter
   //!
   //! @brief Constructor of SPI class.  This function initializes errorSPI struct,
   //! sets value of constructorProperties struct and local variables. Then calls
   //! device tree loading function and port path finding function.
   //!
   //! @param  spi
   //! @param  spiBitsPerWord
   //! @param  spiMode
   //! @param  spiSpeed
   //! @retval
   Encoder(spiName spiName, uint8_t spiBitsPerWord, uint8_t spiMode, uint32_t spiSpeed);

   //! @name ~GonioMeter
   //!
   //! @brief Destructor of GonioMeter class.  This function closes TTY file and deletes
   //! errorSPI struct pointer.
   //!
   //!
   //! @retval
   virtual ~Encoder();

   //! @name close
   //!
   //! @brief Closes TTY file of spi.  This function closes spi's TTY file and changes
   //! isOpenFlag's value.
   //!
   //!
   //! @retval bool
   bool close();

   float transferNEW1();
   //! @name isClose
   //!
   //! @brief Checks spi's tty file's close state.
   //!
   //!
   //! @retval bool
   bool isClose();

   //! @name isOpen
   //!
   //! @brief Checks spi's tty file's open state.
   //!
   //!
   //! @retval bool
   bool isOpen();


   //! @name setBitsPerWord
   //!
   //! @brief Changes word size of spi.  This function changes bits per word size of
   //! spi on fly.
   //!
   //! @param  newBitSize
   //! @retval bool
   bool setBitsPerWord(uint8_t newBitSize);

   //! @name setMaximumSpeed
   //!
   //! @brief Changes maximum speed of spi.  This function changes maximum speed of
   //! spi on fly.
   //!
   //! @param  newSpeed
   //! @retval bool
   bool setMaximumSpeed(uint32_t newSpeed);

   //! @name setMode
   //!
   //! @brief Changes mode of spi.  This function changes mode of spi on fly. Users
   //! can send "or"ed Lib::spiMode enums as parameter to this function.
   //!
   //! @param  newMode
   //! @retval bool
   bool setMode(uint8_t newMode);

   bool setProperties(SpiProperties& newProperties);

   //! @name open
   //!
   //! @brief Opens TTY file of spi.  This function opens spi's TTY file with selected
   //! open mode, gets default properties of SPI and saves this properties to SPI::
   //! defaultProperties struct. Then sets properties which are specified at class
   //! initialization stage. Users can send "or"ed Lib::openMode enums as parameter to
   //! this function.
   //! @warning After initialization of SPI class, this function must call. Otherwise
   //! users could not use any of data transfering functions.
   //!
   //! @param  openMode
   //! @retval bool
   bool open(uint openMode);


   //! @name transfer
   //!
   //! @brief Transfers datas to/from slave.  This function creates temporary read
   //! buffer with specified size and then generates <b><i>SPI IOCTL TRANSFER PACKAGE
   //! </i></b> with write buffer pointer, temporary read buffer pointer, buffer size,
   //! delay time, spi word's size and spi speed parameters. After doing ioctl kernel
   //! request if request is finished successfully, datas which are held in temporary
   //! read buffer are copied to @a.
   //!
   //! @param  writeBuffer
   //! @param  readBuffer
   //! @param  bufferSize
   //! @param  wait_us
   //! @retval bool
   bool transfer(uint8_t* writeBuffer, uint8_t* readBuffer, size_t bufferSize, uint16_t wait_us = 10);

   int transferUART4(char *TXbuffer, char *RXbuffer,int dimBufferTX,int dimBufferRX);



   //! Reads the adc value of the asked channel
   //void readADC(float angles[3]);

   //! angle offset
   //float offsets[3];

private:
   //! is used to hold the user specified properties of spi
   SpiProperties constructorProperties;
   //! is used to hold the current properties of spi
   SpiProperties currentProperties;
   //! is used to hold the default properties of spi
   SpiProperties defaultProperties;
   //! is used to hold the spi's device tree overlay name
   std::string dtSpiFilename;
   //! is used to hold the properties of spi is equal to default properties
   bool isCurrentEqDefault;
   //! is used to hold the spi's tty file's state
   bool isOpenFlag;
   //! is used to hold the spi's bus number
   int spiBusNumber;
   //! is used to hold the spi's chip number
   int spiChipNumber;
   //! is used to hold the spi's tty file's file descriptor
   int spiFD;
   //! is used to hold the spi's tty port path
   std::string spiPortPath;

   //! Parses the returned data from the adc
   uint32_t parseData(uint8_t *list);



};
#endif // !defined(_ENCODER_HEADER_)


